<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd"
	default-lazy-init="true">
	<!-- 以后所有的配置文件都可以放到这里加载，通过ApplicationPropertiesUtil来获取 -->
	<bean id="propertyConfigurer" class="com.gta.oec.cms.common.CustomizedPropertyPlaceholderConfigurer">
		<property name="locations">
	        <list>
	            <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:jdbc.properties</value>  
              <value>classpath:messages.properties</value>
	        </list>
	    </property>
		<property name="ignoreResourceNotFound" value="false" />
	</bean>
	
	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="c3p0DataSource" />
		<property name="configLocation" value="classpath:mybatis-configration.xml" />
		<property name="typeAliasesPackage" value="com.gta.oec.cms.vo" />
		<property name="mapperLocations" value="classpath*:com/gta/oec/cms/dao/**/*.xml" />
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="c3p0DataSource" />
	</bean>
	
	<!-- AOP配置 -->
	<!--pointcut元素定义一个切入点，execution中的第一个星号 用以匹配方法的返回类型，这里星号表明匹配所有返回类型。 com.gta.oec.cms.service..*.*(..))表明匹配com.gta.oec.cms.service包下的所有类的所有 方法 -->
		<!--将定义好的事务处理策略应用到上述的切入点 -->
		<!-- 我解释一下execution(* com.gta.oec.cms.service.*.*(..))中几个通配符的含义：
			第一个 * —— 通配 任意返回值类型
			第二个 * —— 通配 包com.gta.oec.cms.service下的任意class
			第三个 * —— 通配 包com.gta.oec.cms.service下的任意class的任意方法
			第四个 .. —— 通配 方法可以有0个或多个参数
		综上：包com.gta.oec.cms.service下的任意class的具有任意返回值类型、任意数目参数和任意名称的方法 -->
	<!-- 声明式事务 -->
	<aop:config proxy-target-class="true">
	    <aop:advisor pointcut="execution(* com.gta.oec.cms.service..*.*(..))" advice-ref="txOecCmsAdvice"/>
	</aop:config>

	<!-- spring have fine isolation level : 
		ISOLATION_DEFAULT; ISOLATION_READ_UNCOMMITTED; 
		ISOLATION_READ_COMMITTED; ISOLATION_REPEATABLE_READ; 
		ISOLATION_SERIALIZABLE -->
	<!-- spring have seven propagation behavior : 
		PROPAGATION_REQUIRED; PROPAGATION_SUPPORTS; 
		PROPAGATION_MANDATORY; PROPAGATION_REQUIRES_NEW; 
		PROPAGATION_NOT_SUPPORTED; PROPAGATION_NEVER; PROPAGATION_NESTED -->
	 <!--配置事务处理策略，transaction-manager属性指定事务管理器。 若事务管理器bean的id即为transactionManager，则 transaction-manager的属性可以不指定 -->
	 <tx:advice id="txOecCmsAdvice" transaction-manager="transactionManager">  
	     <tx:attributes>
	     	<tx:method name="*add*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
	        <tx:method name="*save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
	        <tx:method name="*insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
	        <tx:method name="*delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
	        <tx:method name="*update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
	        <tx:method name="*remove*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>  
	        <tx:method name="*pageQuery" read-only="true"/>
	        <tx:method name="get*" read-only="true"/>
	        <tx:method name="query*" read-only="true"/>
	        <tx:method name="find*" read-only="true"/>
	        <tx:method name="*" />
	    </tx:attributes>  
	 </tx:advice>
	 	 
	<!-- 将所有具有@Transactional注解的Bean自动配置为声明式事务支持 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gta.oec.cms.dao"/>
        <property name="markerInterface" value="com.gta.oec.cms.dao.SqlMapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
	
</beans>
